const grammar = {
    S: ['0A'],
    A: ['A1', '1'],
};

function isGeneratedByGrammar(inputString) {
    const stack = ['S']; // Start with the initial symbol 'S'.

    for (let i = 0; i < inputString.length; i++) {
        const currentSymbol = stack.pop(); // Pop the top symbol from the stack.
        const currentChar = inputString[i];

        if (currentSymbol === currentChar) {
            // Matched, continue with the next character.
        } else if (grammar[currentSymbol]) {
            // If the current symbol has rules, push them onto the stack in reverse order.
            for (let j = grammar[currentSymbol].length - 1; j >= 0; j--) {
                const rule = grammar[currentSymbol][j];
                stack.push(...rule.split('').reverse());
            }
        } else {
            // No matching rule found for the current symbol and character, return false.
            return false;
        }
    }

    // If the stack is empty, all characters in the inputString have been matched.
    return stack.length === 0;
}

const inputString = '011';
const result = isGeneratedByGrammar(inputString);

console.log(
    `Input string "${inputString}" is generated by the grammar: ${result}`,
);
